<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Testplan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread-Gruppe" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Schleifen-Controller (Loop Controller)" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1410354721000</longProp>
        <longProp name="ThreadGroup.end_time">1410354721000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.FirefoxDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig" testname="jp@gc - Firefox Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Use Case 4 2a" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

WDS.browser.get(&apos;http://localhost:3000/&apos;)

var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser, 10, 1000)

//login start
var googleLoginButton = WDS.browser.findElement(pkg.By.id(&apos;google&apos;))
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;google&apos;)))
googleLoginButton.click()
                                    
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;Email&apos;)))
var emailInput = WDS.browser.findElement(pkg.By.id(&apos;Email&apos;)) 
emailInput.sendKeys([&apos;arsnovaflashcards&apos;])
var passwordInput = WDS.browser.findElement(pkg.By.id(&apos;Passwd&apos;))
passwordInput.sendKeys([&apos;cardsARS!&apos;])
var loginButton = WDS.browser.findElement(pkg.By.id(&apos;signIn&apos;))
loginButton.click()
                  
wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.id(&apos;submit_approve_access&apos;)))
var acceptButton = WDS.browser.findElement(pkg.By.id(&apos;submit_approve_access&apos;))
acceptButton.click()
//login end

wait.until(pkg.ExpectedConditions.elementToBeClickable(pkg.By.xpath(&quot;//span[@id=&apos;newCardSet&apos;]/button&quot;)))
var newCardSet = WDS.browser.findElement(pkg.By.xpath(&quot;//span[@id=&apos;newCardSet&apos;]/button&quot;))
newCardSet.click()

wait.until(pkg.ExpectedConditions.visibilityOfElementLocated(pkg.By.id(&apos;newSetName&apos;)))
var newSetName = WDS.browser.findElement(pkg.By.id(&apos;newSetName&apos;))
newSetName.sendKeys([&apos;User Case 4 2a&apos;])

wait.until(pkg.ExpectedConditions.visibilityOfElementLocated(pkg.By.id(&apos;newSetDescription&apos;)))
var newSetDescription = WDS.browser.findElement(pkg.By.id(&apos;newSetDescription&apos;))
newSetDescription.sendKeys([&apos;User Case 4 2a&apos;])

wait.until(pkg.ExpectedConditions.visibilityOfElementLocated(pkg.By.id(&apos;newSetCategory&apos;)))
var newSetDescription = WDS.browser.findElement(pkg.By.id(&apos;newSetCategory&apos;))
newSetDescription.sendKeys([&apos;Test&apos;])

wait.until(pkg.ExpectedConditions.visibilityOfElementLocated(pkg.By.id(&apos;createCardSet&apos;)))
var createCardSet = WDS.browser.findElement(pkg.By.id(&apos;createCardSet&apos;))
createCardSet.click()

wait.until(pkg.ExpectedConditions.visibilityOfElementLocated(pkg.By.linkText(&apos;User Case 4 2a&apos;)))
var useCaseFour = WDS.browser.findElement(pkg.By.linkText(&apos;User Case 4 2a&apos;))
useCaseFour.click()

wait.until(pkg.ExpectedConditions.visibilityOfElementLocated(pkg.By.id(&apos;set-details-controls-btn-editCard&apos;)))
var btnEditCard = WDS.browser.findElement(pkg.By.id(&apos;set-details-controls-btn-editCard&apos;))
btnEditCard.click()

wait.until(pkg.ExpectedConditions.visibilityOfElementLocated(pkg.By.id(&apos;cardSetSave&apos;)))
var cardSetSave = WDS.browser.findElement(pkg.By.id(&apos;cardSetSave&apos;))
cardSetSave.click()

WDS.sampleResult.sampleEnd()

wait.until(pkg.ExpectedConditions.visibilityOfElementLocated(pkg.By.cssSelector(&apos;#set-details-sideBar-region h4&apos;)))
var titleOfSet = WDS.browser.findElement(pkg.By.cssSelector(&apos;#set-details-sideBar-region h4&apos;))

if(titleOfSet.getText().contains(&quot;User Case 4 2a&quot;)) {
    
    wait.until(pkg.ExpectedConditions.visibilityOfElementLocated(pkg.By.id(&apos;set-details-controls-btn-editCard&apos;)))
    var editButton = WDS.browser.findElement(pkg.By.id(&apos;set-details-controls-btn-editCard&apos;))
    editButton.click()
    
    wait.until(pkg.ExpectedConditions.visibilityOfElementLocated(pkg.By.id(&apos;editSetName&apos;)))
    var deleteButton = WDS.browser.findElement(pkg.By.id(&apos;cardSetDelete&apos;))
    deleteButton.click()
    deleteButton.click()
    
} 

else {
    WDS.sampleResult.successful = false
    WDS.sampleResult.responseMessage = &apos;There were no result returned&apos;
}

var emailButton = WDS.browser.findElement(pkg.By.id(&apos;usr-name&apos;))
emailButton.click()

var logoutButton = WDS.browser.findElement(pkg.By.id(&apos;logout&apos;))
logoutButton.click()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="Zeige Ergebnisse in der Tabelle" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
